count <- Data_Day$cnt %>% ts(frequency = 365) %>% stl("periodic")
timeseries_model <- lm(cnt ~ lag(cnt) +
lag(cnt,2) +
lag(cnt,3) +
lag(cnt,4) +
lag(cnt,5), data = day_data)
timeseries_model <- lm(cnt ~ lag(cnt) +
lag(cnt,2) +
lag(cnt,3) +
lag(cnt,4) +
lag(cnt,5), data = Data_Day)
day_data %>% transmute(dteday,cnt,prediction = c(0,0,0,0,0, predict(timeseries_model))) %>%
gather("Type","Value",-dteday) %>%
ggplot(aes(x = dteday, y = Value, color = Type)) +
labs(x='Date')+
geom_point()
library(ggplot2)
library(plotly)
library(dplyr)
library(grid)
library(gridExtra)
library(date)
library(lubridate)
library(pacman)
library(forecast)
library(tidyr)
timeseries_model <- lm(cnt ~ lag(cnt) +
lag(cnt,2) +
lag(cnt,3) +
lag(cnt,4) +
lag(cnt,5), data = Data_Day)
day_data %>% transmute(dteday,cnt,prediction = c(0,0,0,0,0, predict(timeseries_model))) %>%
gather("Type","Value",-dteday) %>%
ggplot(aes(x = dteday, y = Value, color = Type)) +
labs(x='Date')+
geom_point()
Data_Day %>% transmute(dteday,cnt,prediction = c(0,0,0,0,0, predict(timeseries_model))) %>%
gather("Type","Value",-dteday) %>%
ggplot(aes(x = dteday, y = Value, color = Type)) +
labs(x='Date')+
geom_point()
count <- day_data$cnt %>%
ts(frequency = 365) %>%
stl("periodic")
plot(forecast(count))
count <- Data_Day$cnt %>%
ts(frequency = 365) %>%
stl("periodic")
plot(forecast(count))
rm(list=ls())
#Load the Data
Data_Day = read.csv('Dataset/day_data.csv', header = T )
#Exploratory Data Analysis
class(Data_Day)
dim(Data_Day)
head(Data_Day)
names(Data_Day)
str(Data_Day)
summary(Data_Day)
#Droping few columns
Data_Day = subset(Data_Day, select = -c(instant, dteday))
dim(Data_Day)
names(Data_Day)
#separate numeric and categorical variables
numeric_var = c('temp', 'atemp', 'hum', 'windspeed', 'cnt')
categorical_var = c('season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit')
# Missing Value analysis
summary(is.na(Data_Day))
sum(is.na(Data_Day))
#Outlier Analysis
df = Data_Day
Data_Day = df
library(ggplot2)
for (i in 1:length(numeric_var))
{
assign(paste0("gn",i), ggplot(aes_string(y = (numeric_var[i]), x = "cnt"), data = subset(Data_Day))+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=numeric_var[i],x="count")+
ggtitle(paste("Box plot of count for",numeric_var[i])))
}
## Plotting plots together
gridExtra::grid.arrange(gn1,gn2,gn3,ncol=3)
gridExtra::grid.arrange(gn4,gn5, ncol=2)
for(i in numeric_var){
print(i)
outlier = Data_Day[,i][Data_Day[,i] %in% boxplot.stats(Data_Day[,i])$out]
print(length(outlier))
Data_Day[,i][Data_Day[,i] %in% outlier] = NA
}
sum(is.na(Data_Day))
ggplot(Data_Day, aes(x = Data_Day$season, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "blue")+
labs(title = "Number of bikes rented with respect to season", x = "Seasons", y = "cnt")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day, aes(x = Data_Day$yr, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "red")+
labs(title = "Number of bikes rented with respect to year", x = "yr", y = "cnt")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day, aes(x = Data_Day$weekday, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "navyblue")+
labs(title = "Number of bikes rented with respect to days", x = "Days of the week", y = "count")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day,aes(temp,cnt)) +
geom_point(aes(color=hum),alpha=0.5) +
labs(title = "Bikes count vs Temperature and Humidity", x = "Normalized temperature", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Data_Day, aes(x = windspeed, y = cnt))+
geom_point(aes(color= weathersit ), alpha=0.5) +
labs(title = "Bikes Count vs Windspeed and Weather", x = "Windspeed", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Data_Day, aes(x = temp, y = cnt))+
geom_point(aes(color=season),alpha=0.5) +
labs(title = "Bikes Count vs Temperature and Season", x = "Normalized temperature", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
df2 = Data_Day
Data_Day = df2
library(corrgram)
corrgram(Data_Day[,numeric_var],order=FALSE,upper.panel = panel.pie,
text.panel = panel.txt,
main= "Correlation Analysis between Numeric Variables")
for(i in categorical_var){
print(i)
Anova_test_result = summary(aov(formula = cnt~Data_Day[,i],Data_Day))
print(Anova_test_result)
}
Data_Day = subset(Data_Day, select=-c(atemp,holiday,weekday,workingday))
numeric_var = c("temp","hum","windspeed","cnt")
catergorical_var = c("season", "yr", "mnth", "weathersit")
library(propagate)
for(i in numeric_var){
print(i)
skew = skewness(Data_Day[,i])
print(skew)
}
for(i in numeric_var){
print(summary(Data_Day[,i]))
}
hist(Data_Day$temp, col="Navyblue", xlab="Temperature", ylab="Frequency",
main="Temperature Distribution")
hist(Data_Day$hum, col="Blue", xlab="Humidity", ylab="Frequency",
main="Humidity Distribution")
hist(Data_Day$windspeed,col="Dark green",xlab="Windspeed",ylab="Frequency",
main="Windspeed Distribution")
library(DataCombine)
rmExcept("Data_Day")
df3 = Data_Day
Data_Day = df3
Rsquare = function(y,y1){
cor(y,y1)^2
}
MAPE = function(y,y1){
mean(abs((y-y1)/y))*100
}
categorical_var = c("season","yr","mnth","weathersit")
library(dummies)
Data_Day = dummy.data.frame(Data_Day, categorical_var)
# Save Data for KFold CV
KFData = Data_Day
set.seed(123)
train_index = sample(1:nrow(Data_Day),0.8*nrow(Data_Day))
train= Data_Day[train_index,]
test= Data_Day[-train_index,]
numeric_var = c("temp","hum","windspeed", "cnt")
numeric_var2 = Data_Day[,numeric_var]
library(usdm)
vifcor(numeric_var2, th = 0.7)
library(rpart)
vifcor(numeric_var2, th = 0.7)
library(rpart)
DTModel = rpart(cnt~., train, method = "anova" , minsplit=5)
DTTest = predict(DTModel, test[-25])
summary(DTModel)
DTMape_Test = MAPE(test[,25], DTTest)
DTMape_Test = MAPE(test[,25], DTTest)
summary(DTModel)
DTMape_Test = MAPE(test[,25], DTTest)
DTMape_Test   #26.4225
DT_RSquare = Rsquare(test[,25], DTTest)
DT_RSquare  #0.7612102
LRModel = lm(cnt~., train)
summary(LRModel)
LRTest = predict(LRModel, test[-25])
LRMape_Test = MAPE(test[,25], LRTest)
LRMape_Test #  21.56792
LR_RSquare = Rsquare(test[,25], LRTest)
LR_RSquare  #  0.8191175
print("MAPE Statistics")
print(DTMape_Test)
print(LRMape_Test)
print("Accuracy")
print(100 - DTMape_Test)
print(100 - LRMape_Test)
print("R Square Statistics")
print(DT_RSquare)
print(LR_RSquare)
count <- Data_Day$cnt %>%
ts(frequency = 365) %>%
stl("periodic")
plot(forecast(count))
rm(list=ls())
#Load the Data
Data_Day = read.csv('Dataset/day_data.csv', header = T )
#Exploratory Data Analysis
class(Data_Day)
dim(Data_Day)
head(Data_Day)
names(Data_Day)
str(Data_Day)
summary(Data_Day)
#Dropping few columns since they are not important for our analysis
Data_Day = subset(Data_Day, select = -c(instant, dteday))
dim(Data_Day)
names(Data_Day)
#Separate Numeric and Categorical variables
numeric_var = c('temp', 'atemp', 'hum', 'windspeed', 'cnt')
categorical_var = c('season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit')
# Missing Value analysis
summary(is.na(Data_Day))
sum(is.na(Data_Day))
# Outlier Analysis
df = Data_Day
Data_Day = df
library(ggplot2)
for (i in 1:length(numeric_var))
{
assign(paste0("gn",i), ggplot(aes_string(y = (numeric_var[i]), x = "cnt"), data = subset(Data_Day))+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=numeric_var[i],x="count")+
ggtitle(paste("Box plot of count for",numeric_var[i])))
}
# Plotting plots together
gridExtra::grid.arrange(gn1,gn2,gn3,ncol=3)
gridExtra::grid.arrange(gn4,gn5, ncol=2)
for(i in numeric_var){
print(i)
outlier = Data_Day[,i][Data_Day[,i] %in% boxplot.stats(Data_Day[,i])$out]
print(length(outlier))
Data_Day[,i][Data_Day[,i] %in% outlier] = NA
}
# Missing Value analysis
summary(is.na(Data_Day))
rm(list=ls())
#Load the Data
Data_Day = read.csv('Dataset/day_data.csv', header = T )
#Exploratory Data Analysis
class(Data_Day)
dim(Data_Day)
head(Data_Day)
head(Data_Day,10)
names(Data_Day)
str(Data_Day)
summary(Data_Day)
#Dropping few columns since they are not important for our analysis
Data_Day = subset(Data_Day, select = -c(instant, dteday))
dim(Data_Day)
names(Data_Day)
#Separate Numeric and Categorical variables
numeric_var = c('temp', 'atemp', 'hum', 'windspeed', 'cnt')
categorical_var = c('season', 'yr', 'mnth', 'holiday', 'weekday', 'workingday', 'weathersit')
# Missing Value analysis
summary(is.na(Data_Day))
sum(is.na(Data_Day))
# Outlier Analysis
df = Data_Day
Data_Day = df
library(ggplot2)
for (i in 1:length(numeric_var))
{
assign(paste0("gn",i), ggplot(aes_string(y = (numeric_var[i]), x = "cnt"), data = subset(Data_Day))+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=numeric_var[i],x="count")+
ggtitle(paste("Box plot of count for",numeric_var[i])))
}
# Plotting plots together
gridExtra::grid.arrange(gn1,gn2,gn3,ncol=3)
gridExtra::grid.arrange(gn4,gn5, ncol=2)
for(i in numeric_var){
print(i)
outlier = Data_Day[,i][Data_Day[,i] %in% boxplot.stats(Data_Day[,i])$out]
print(length(outlier))
Data_Day[,i][Data_Day[,i] %in% outlier] = NA
}
sum(is.na(Data_Day))
ggplot(Data_Day, aes(x = Data_Day$season, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "blue")+
labs(title = "Number of bikes rented with respect to season", x = "Seasons", y = "cnt")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
#Bar plot for Season-wise Monthly Distribution of Counts
ggplot(Data_Day,aes(x=mnth,y=cnt,fill=season))+theme_bw()+geom_col()+
labs(x='Month',y='Total_Count',title='Season-wise Monthly Distribution of Counts')
#Bar plot for Weekday-wise Monthly Distribution of Counts
ggplot(Data_Day,aes(x=mnth,y=cnt,fill=weekday))+theme_bw()+geom_col()+
labs(x='Month',y='Total_Count',title='Weekday-wise Monthly Distribution of Counts')
#Bar plot for Yearly-wise Distribution of Counts
ggplot(Data_Day,aes(x=yr,y=cnt,fill=yr))+geom_col()+theme_bw()+
labs(x='Year',y='Total_Count',title='Yearly-wise Distribution of Counts')
#Bar plot for Weekday-wise Monthly Distribution of Counts
ggplot(Data_Day,aes(x=mnth,y=cnt,fill=weekday))+theme_bw()+geom_col()+
labs(x='Month',y='Total_Count',title='Weekday-wise Monthly Distribution of Counts')
#Bar plot for Yearly-wise Distribution of Counts
ggplot(Data_Day,aes(x=yr,y=cnt,fill=yr))+geom_col()+theme_bw()+
labs(x='Year',y='Total_Count',title='Yearly-wise Distribution of Counts')
#Bar plot for Holiday-wise Distribution of Counts
ggplot(Data_Day,aes(x=holiday,y=cnt,fill=season))+geom_col()+theme_bw()+
labs(x='holiday',y='Total_Count',title='Holiday-wise Distribution of Counts')
#Bar plot for Working Day wise Distribution of Counts
ggplot(Data_Day,aes(x=workingday,y=cnt,fill=season))+geom_col()+theme_bw()+
labs(x='workingday',y='Total_Count',title='Working Day wise Distribution of Counts')
#Bar plot for Weather_Condition Distribution of Counts
ggplot(Data_Day,aes(x=weathersit,y=cnt,fill=season))+geom_col()+theme_bw()+
labs(x='Weather_condition',y='total_count',title='Weather_Condition Distribution of Counts')
ggplot(Data_Day, aes(x = Data_Day$season, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "blue")+
labs(title = "Number of bikes rented with respect to season", x = "Seasons", y = "cnt")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day, aes(x = Data_Day$yr, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "red")+
labs(title = "Number of bikes rented with respect to year", x = "yr", y = "cnt")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day, aes(x = Data_Day$weekday, y = Data_Day$cnt))+
geom_bar(stat = "identity", fill = "navyblue")+
labs(title = "Number of bikes rented with respect to days", x = "Days of the week", y = "count")+
theme(panel.background = element_rect("white"))+
theme(plot.title = element_text(face = "bold"))
ggplot(Data_Day,aes(temp,cnt)) +
geom_point(aes(color=hum),alpha=0.5) +
labs(title = "Bikes count vs Temperature and Humidity", x = "Normalized temperature", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Data_Day, aes(x = windspeed, y = cnt))+
geom_point(aes(color= weathersit ), alpha=0.5) +
labs(title = "Bikes Count vs Windspeed and Weather", x = "Windspeed", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Data_Day, aes(x = temp, y = cnt))+
geom_point(aes(color=season),alpha=0.5) +
labs(title = "Bikes Count vs Temperature and Season", x = "Normalized temperature", y = "Count")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
df2 = Data_Day
Data_Day = df2
library(corrgram)
corrgram(Data_Day[,numeric_var],order=FALSE,upper.panel = panel.pie,
text.panel = panel.txt,
main= "Correlation Analysis between Numeric Variables")
for(i in categorical_var){
print(i)
Anova_test_result = summary(aov(formula = cnt~Data_Day[,i],Data_Day))
print(Anova_test_result)
}
Data_Day = subset(Data_Day, select=-c(atemp,holiday,weekday,workingday))
numeric_var = c("temp","hum","windspeed","cnt")
catergorical_var = c("season", "yr", "mnth", "weathersit")
library(propagate)
for(i in numeric_var){
print(i)
skew = skewness(Data_Day[,i])
print(skew)
}
for(i in numeric_var){
print(summary(Data_Day[,i]))
}
hist(Data_Day$temp, col="Navyblue", xlab="Temperature", ylab="Frequency",
main="Temperature Distribution")
hist(Data_Day$hum, col="Blue", xlab="Humidity", ylab="Frequency",
main="Humidity Distribution")
hist(Data_Day$windspeed,col="Dark green",xlab="Windspeed",ylab="Frequency",
main="Windspeed Distribution")
#Quintle-Quintle normal plot
qqnorm(Data_Day$cnt)
#Quintle-Quintle line
qqline(Data_Day$cnt)
train_data<-filter(Data_Day, yr==0)
# Load the purrr library
library(purrr)
library(dplyr)
train_data<-filter(Data_Day, yr==0)
dim(train_data)
test_data<- filter(Data_Day, yr==1)
dim(test_data)
#Read the train and test data
head(train_data,5)
head(test_data,5)
#Create a new subset for train attributes
train<-subset(train_data,select=c('season','year','month','holiday', 'weekday','workingday','weather_condition','temp','humidity','windspeed','total_count'))
#Create a new subset for train attributes
train<-subset(train_data,select=c('season','yr','mnth','holiday', 'weekday','workingday','weathersit','temp','hum','windspeed','cnt'))
#Create a new subset for test attributes
test<-subset(test_data,select=c('season','yr','month','holiday','weekday','workingday','weathersit','temp','hum','windspeed','cnt'))
train_data<-filter(Data_Day, yr==0)
dim(train_data)
test_data<- filter(Data_Day, yr==1)
dim(test_data)
#Read the train and test data
head(train_data,5)
head(test_data,5)
#Create a new subset for train attributes
train<-subset(train_data,select=c('season','yr','mnth','weathersit','temp','hum','windspeed','cnt'))
head(train,5)
#load the caret library
library(caret)
#other variables along with target variable to get dummy variables
othervars<-c('mnth','temp','hum','windspeed','cnt')
set.seed(1818)
#Categorical variables
vars<-setdiff(colnames(train),c(train$cnt,othervars))
#formula pass through encoder to get dummy variables
f <- paste('~', paste(vars, collapse = ' + '))
#encoder is encoded the categorical variables to numeric
encoder<-dummyVars(as.formula(f), train)
#Predicting the encode attributes
encode_attributes<-predict(encoder,train)
#Binding the train_num_attributes and encode_attributes
train_encoded_attributes<-cbind(train_num_attributes,encode_attributes)
#create a new subset for train categorical attributes
train_cat_attributes<-subset(train,select=c('season','weathersit','yr'))
#create a new subset for test categorical attributes
test_cat_attributes<-subset(test,select=c('season','weathersit','yr'))
#create a new subset for train categorical attributes
train_cat_attributes<-subset(train_data,select=c('season','weathersit','yr'))
#create a new subset for test categorical attributes
test_cat_attributes<-subset(test_data,select=c('season','weathersit','yr'))
#create a new subset for train numerical attributes
train_num_attributes<-subset(train,select=c('mnth','temp','hum','windspeed','cnt'))
#create a new subset for test numerical attributes
test_num_attributes<-subset(test,select=c('mnth','temp', 'hum','windspeed','cnt'))
#load the caret library
library(caret)
#create a new subset for train numerical attributes
train_num_attributes<-subset(train_data,select=c('mnth','temp','hum','windspeed','cnt'))
#create a new subset for test numerical attributes
test_num_attributes<-subset(test_data,select=c('mnth','temp', 'hum','windspeed','cnt'))
#load the caret library
library(caret)
#other variables along with target variable to get dummy variables
othervars<-c('mnth','temp','hum','windspeed','cnt')
set.seed(1818)
#Categorical variables
vars<-setdiff(colnames(train),c(train$cnt,othervars))
#formula pass through encoder to get dummy variables
f <- paste('~', paste(vars, collapse = ' + '))
#encoder is encoded the categorical variables to numeric
encoder<-dummyVars(as.formula(f), train)
#Predicting the encode attributes
encode_attributes<-predict(encoder,train)
#Binding the train_num_attributes and encode_attributes
train_encoded_attributes<-cbind(train_num_attributes,encode_attributes)
head(train_encoded_attributes,5)
set.seed(8181)
#Categorical variables
vars<-setdiff(colnames(test),c(test$cnt,othervars))
#Categorical variables
vars<-setdiff(colnames(test_cat_attributes),c(test_cat_attributes$cnt,othervars))
#formula pass through encoder to get dummy variables
f<- paste('~',paste(vars,collapse='+'))
#Encoder is encoded the categorical variables to numeric
encoder<-dummyVars(as.formula(f),test_cat_attributes)
#Predicting the encoder attributes
encode_attributes<-predict(encoder,test_num_attributes)
#Predicting the encoder attributes
encode_attributes<-predict(encoder,test_cat_attributes)
#Binding the test_num_attributes and encode_attributes
test_encoded_attributes<-cbind(test_num_attributes,encode_attributes)
head(test_encoded_attributes,5)
df3 = Data_Day
Data_Day = df3
Rsquare = function(y,y1){
cor(y,y1)^2
}
MAPE = function(y,y1){
mean(abs((y-y1)/y))*100
}
categorical_var = c("season","yr","mnth","weathersit")
library(dummies)
Data_Day = dummy.data.frame(Data_Day, categorical_var)
# Save Data for KFold CV
KFData = Data_Day
set.seed(123)
train_index = sample(1:nrow(Data_Day),0.8*nrow(Data_Day))
train= Data_Day[train_index,]
test= Data_Day[-train_index,]
numeric_var = c("temp","hum","windspeed", "cnt")
numeric_var2 = Data_Day[,numeric_var]
library(usdm)
vifcor(numeric_var2, th = 0.7)
count <- Data_Day$cnt %>%
ts(frequency = 365) %>%
stl("periodic")
plot(forecast(count))
library(forecast)
count <- Data_Day$cnt %>%
ts(frequency = 365) %>%
stl("periodic")
plot(forecast(count))
